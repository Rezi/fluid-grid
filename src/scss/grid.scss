@use 'sass:math';
@use 'sass:meta';

:root {
  --grid-gap: 16px;
  --f-grid-bg: transparent;
}
$max-colspan: 10;
$max-rowspan: 5;
$max-col-collapse: $max-colspan;
$minimal-column-width: 60px;
$widest-grid-element: 1280;
$max-solid: math.floor(math.div($widest-grid-element, $minimal-column-width));

@for $i from 2 through $max-solid {
  @for $j from 2 through $max-colspan {
    @if $i > $j {
      @container (min-width: #{($i) * $minimal-column-width}) and (max-width: #{($i + 1) * $minimal-column-width}) {
        .f-grid-solid-#{$j} {
          $nthChild: math.floor(math.div($i, $j));
          @for $k from 1 through $nthChild {
            $nthChildDiff: $nthChild - $k;

            @if math.div($i, $j) >=
              $nthChild and
              (($i % $j != 0) or $nthChildDiff != 0)
            {
              .f-col-#{$j}:nth-child(#{$k}):last-child {
                margin-right: #{(
                    math.div(100%, (($i % $j) + $j + ($j * $nthChildDiff))) *
                      (($i % $j) + ($j * $nthChildDiff))
                  )};
                grid-column: span #{(($i % $j) + $j) + ($nthChildDiff * $j)};
              }
            }
          }
        }
      }
    }
  }
}

@for $i from 2 through $max-colspan {
  @container (min-width: #{$i * $minimal-column-width}) {
    .f-grid-#{$i} {
      grid-template-columns: repeat(#{$i}, minmax($minimal-column-width, 1fr));
    }
  }
}

@for $i from $max-colspan through 2 {
  @for $k from 1 through $i {
    @container (min-width: #{$k * $minimal-column-width}) and (max-width: #{(($i + 1) * $minimal-column-width)}) {
      .f-grid-#{$k}-#{$i} {
        grid-template-columns: repeat(
          #{$k},
          minmax($minimal-column-width, 1fr)
        );
      }
    }
  }
}

.f-grid.f-grid-solid {
  grid-template-columns: repeat(auto-fill, minmax($minimal-column-width, 1fr));
}

.f-grid-dense {
  grid-auto-flow: dense;
}

.f-grid-wrap-fix {
  padding-block: 0.02px;
}

.f-grid-wrap-overflow {
  overflow: hidden;
}

.f-container {
  container-type: inline-size;
}

.f-grid {
  container-type: inline-size;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($minimal-column-width, 1fr));
  word-break: break-word;

  .f-col-max {
    grid-column-start: 1;
    grid-column-end: -1;
  }

  @for $i from 2 through $max-rowspan {
    .f-row-#{$i} {
      grid-row: span #{$i};
    }
  }

  &.f-grid-bottom {
    align-self: end;
  }

  &.f-grid-center {
    align-self: center;
  }

  &.f-grid-top {
    align-self: start;
  }
}

@for $i from 2 through $max-colspan {
  @container (min-width: #{($i * $minimal-column-width)}) {
    @for $j from $i through $max-colspan {
      .f-col-#{$j} {
        grid-column: span #{$i};
      }
    }
  }
}

/**** COLLAPSE FUNCTIONALITY ****/

@for $i from $max-colspan through 2 {
  @for $k from 1 through $i {
    @container (min-width: #{($i * $minimal-column-width)}) and (max-width: #{(($i + 1) * $minimal-column-width)}) {
      .f-col-#{$k}\@#{$i} {
        grid-column: span #{$k};
      }
    }
  }

  @for $k from 1 through $i {
    @container (min-width: #{($k * $minimal-column-width)}) and (max-width: #{(($i + 1) * $minimal-column-width)}) {
      .f-col-#{$k}-#{$i} {
        grid-column: span #{$k};
      }
    }
  }

  @for $k from 1 through $max-rowspan {
    @container (min-width: #{($k * $minimal-column-width)}) and (max-width: #{(($i + 1) * $minimal-column-width)}) {
      .f-row-#{$k}-#{$i} {
        grid-row: span #{$k};
      }
    }
  }
}

@for $i from 2 through $max-col-collapse {
  @container (max-width: #{(($i + 1) * $minimal-column-width) }) {
    .f-col-#{$i}-collapse {
      grid-column-start: 1;
      grid-column-end: -1;
    }

    .f-grid-#{$i}-collapse > [class*='f-col-'] {
      grid-column-start: 1;
      grid-column-end: -1;
    }
  }
}

$gapMap: (
  '05': 0.25,
  '1': 0.5,
  '2': 1,
  '3': 1.5,
);

@each $name, $size in $gapMap {
  .f-grid-gap-#{$name} {
    margin: calc(var(--grid-gap) * -#{$size});

    > * {
      padding: calc(var(--grid-gap) * #{$size});
    }

    > .f-grid {
      padding: calc(var(--grid-gap) * #{$size}) !important;
    }
  }
}
